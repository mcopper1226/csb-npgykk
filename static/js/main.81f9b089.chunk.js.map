{"version":3,"sources":["svgParse.js","Icon.js","App.js","index.js"],"names":["parseSVG","upload","oDOM","DOMParser","parseFromString","documentElement","children","reduce","list","item","nodeName","concat","type","d","getAttribute","cx","cy","r","Icon","name","size","nodes","styles","color","style","height","width","viewBox","map","node","index","fillRule","FileUploader","onFileSelectSuccess","useRef","className","id","onChange","e","target","files","file","a","console","log","text","str","parsed","App","useState","selectedFile","initialValues","icons","onSubmit","values","props","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsJson","icon","content","setFieldValue","render","arrayHelpers","length","htmlFor","read","then","res","onClick","insert","push","rootElement","getElementById","ReactDOM"],"mappings":"uNAAaA,EAAW,SAACC,GACvB,IACIC,GADU,IAAIC,WACCC,gBAAgBH,EAAQ,iBAyB3C,OAvBc,YAAOC,EAAKG,gBAAgBC,UACnBC,QAAO,SAACC,EAAMC,GACnC,MAAsB,SAAlBA,EAAKC,SACAF,EAAKG,OAAO,CACjB,CACEC,KAAM,OACNC,EAAGJ,EAAKK,aAAa,QAKL,WAAlBL,EAAKC,SACAF,EAAKG,OAAO,CACjB,CACEC,KAAM,SACNG,GAAIN,EAAKK,aAAa,MACtBE,GAAIP,EAAKK,aAAa,MACtBG,EAAGR,EAAKK,aAAa,QAIpBN,IACN,K,cCIUU,EA9BF,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,KAAqBC,GAAY,EAA3BC,OAA2B,EAAnBC,MAAmB,EAAZF,OAGzC,OACE,mBAAGG,MAAO,CAAEC,OAAO,GAAD,OAAKL,EAAL,MAAeM,MAAM,GAAD,OAAKN,EAAL,OAAtC,SACE,qBAAKM,MAAON,EAAMK,OAAQL,EAAMO,QAAO,YAAvC,SACGN,EAAMO,KAAI,SAACC,EAAMC,GAAP,OACT,qCACiB,SAAdD,EAAKjB,MACJ,sBAEEC,EAAGgB,EAAKhB,EACRW,MAAO,CAAEO,SAAU,YAHrB,eACeZ,EADf,YACuBW,IAKV,WAAdD,EAAKjB,MACJ,wBAEEG,GAAIc,EAAKd,GACTC,GAAIa,EAAKb,GACTC,EAAGY,EAAKZ,GAJV,eACeE,EADf,YACuBW,eCX/BE,EAAe,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,oBAAqBd,EAAW,EAAXA,KACzBe,iBAAO,MAOzB,OACE,qBAAKC,UAAU,gBAAf,SACE,uBAAOC,GAAG,OAAOjB,KAAMA,EAAMP,KAAK,OAAOyB,SAPrB,SAACC,GAEvBL,EAAoBK,EAAEC,OAAOC,MAAM,U,4CAUvC,WAAoBC,GAApB,iBAAAC,EAAA,6DAEEC,QAAQC,IAAI,OAAQH,GAFtB,SAGoBA,EAAKI,OAHzB,cAGQC,EAHR,OAIQC,EAAS/C,EAAS8C,GACxBH,QAAQC,IAAI,SAAUG,GALxB,kBAMSA,GANT,4C,sBAqBe,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBACA,GADA,UACwCA,mBAAS,OAAjD,mBAAOC,EAAP,UAEA,OADAP,QAAQC,IAAIM,GAEV,qBAAKf,UAAU,MAAf,SACE,cAAC,IAAD,CACEgB,cAAe,CACbC,MAAO,IAETC,SAAU,SAACC,EAAQC,GACjBZ,QAAQC,IAAIU,GAvBtB,SAA8BE,EAAWC,GACvC,IAAIC,EACF,gCACAC,mBAAmBC,KAAKC,UAAUL,IAChCM,EAAqBC,SAASC,cAAc,KAChDF,EAAmBG,aAAa,OAAQP,GACxCI,EAAmBG,aAAa,WAAYR,EAAa,SACzDM,SAASG,KAAKC,YAAYL,GAC1BA,EAAmBM,QACnBN,EAAmBO,SA0BXC,CAXahB,EAAOF,MAAM7C,QAAO,SAACC,EAAM+D,GACtC,OAAO,2BACF/D,GADL,kBAEG+D,EAAKpD,KAAO,CACXE,MAAOkD,EAAKC,QACZ9C,MAAO,GACPD,OAAQ,QAGX,IAEwB,UAjB/B,SAoBG,YAAgC,IAA7B6B,EAA4B,EAA5BA,OAAQmB,EAAoB,EAApBA,cACV,OACE,qCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEtD,KAAK,QACLuD,OAAQ,SAACC,GAAD,OACN,gCACGrB,EAAOF,OAASE,EAAOF,MAAMwB,OAAS,EACrCtB,EAAOF,MAAMxB,KAAI,SAAC2C,EAAMzC,GAAP,OACf,sBAAiBK,UAAU,aAA3B,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAO0C,QAAQ,OAAf,uBACA,cAAC,IAAD,CAAO1D,KAAI,gBAAWW,EAAX,SAAyBlB,KAAK,YAE3C,sBAAKuB,UAAU,cAAf,UACE,uBAAO0C,QAAQ,OAAf,yBACA,cAAC,EAAD,CACE1D,KAAI,gBAAWW,EAAX,YACJG,oBAAqB,SAACQ,I,4CACpBqC,CAAKrC,GAAMsC,MAAK,SAACC,GACfP,EAAc,SAAD,OACF3C,EADE,YAEXkD,YAMV,qBAAK7C,UAAU,eAAf,SACGmB,EAAOF,MAAMtB,GAAO0C,SACnB,cAAC,EAAD,CACErD,KAAMW,EACNV,KAAM,GACNC,MAAOiC,EAAOF,MAAMtB,GAAO0C,YAIjC,wBACE5D,KAAK,SACLqE,QAAS,kBAAMN,EAAaN,OAAOvC,IAFrC,eAMA,wBACElB,KAAK,SACLqE,QAAS,kBACPN,EAAaO,OAAOpD,EAAQ,EAAG,CAC7BX,KAAM,GACNqD,QAAS,MALf,iBAlCQ1C,MAgDZ,wBACElB,KAAK,SACLqE,QAAS,kBAAMN,EAAaQ,KAAK,KAFnC,sBAOF,8BACE,wBAAQvE,KAAK,SAAb,8BAMV,uBACCgD,KAAKC,UAAUP,WCxI9B,IAAM8B,EAAcrB,SAASsB,eAAe,QAC5CC,IAASZ,OACP,cAAC,aAAD,UACE,cAAC1B,EAAD,MAEFoC,K","file":"static/js/main.81f9b089.chunk.js","sourcesContent":["export const parseSVG = (upload) => {\n  var oParser = new DOMParser();\n  var oDOM = oParser.parseFromString(upload, \"image/svg+xml\");\n  // print the name of the root element or error message\n  const children = [...oDOM.documentElement.children];\n  const nodes = children.reduce((list, item) => {\n    if (item.nodeName === \"path\") {\n      return list.concat([\n        {\n          type: \"path\",\n          d: item.getAttribute(\"d\")\n        }\n      ]);\n    }\n\n    if (item.nodeName === \"circle\") {\n      return list.concat([\n        {\n          type: \"circle\",\n          cx: item.getAttribute(\"cx\"),\n          cy: item.getAttribute(\"cy\"),\n          r: item.getAttribute(\"r\")\n        }\n      ]);\n    }\n    return list;\n  }, []);\n  return nodes;\n};\n","const Icon = ({ name, size, styles, color, nodes }) => {\n  // const icon = icons[name] || icons.help;\n\n  return (\n    <i style={{ height: `${size}px`, width: `${size}px` }}>\n      <svg width={size} height={size} viewBox={`0 0 48 48`}>\n        {nodes.map((node, index) => (\n          <>\n            {node.type === \"path\" && (\n              <path\n                key={`node-${name}-${index}`}\n                d={node.d}\n                style={{ fillRule: \"evenodd\" }}\n              />\n            )}\n            {node.type === \"circle\" && (\n              <circle\n                key={`node-${name}-${index}`}\n                cx={node.cx}\n                cy={node.cy}\n                r={node.r}\n              />\n            )}\n          </>\n        ))}\n      </svg>\n    </i>\n  );\n};\n\nexport default Icon;\n","import { useState, useRef } from \"react\";\nimport \"./styles.css\";\nimport { parseSVG } from \"./svgParse\";\nimport { Formik, Form, Field, FieldArray } from \"formik\";\nimport Icon from \"./Icon\";\n\nconst FileUploader = ({ onFileSelectSuccess, name }) => {\n  const fileInput = useRef(null);\n\n  const handleFileInput = (e) => {\n    // handle validations\n    onFileSelectSuccess(e.target.files[0]);\n  };\n\n  return (\n    <div className=\"file-uploader\">\n      <input id=\"file\" name={name} type=\"file\" onChange={handleFileInput} />\n    </div>\n  );\n};\n\nasync function read(file) {\n  // Read the file as text\n  console.log(\"FILE\", file);\n  const str = await file.text();\n  const parsed = parseSVG(str);\n  console.log(\"parsed\", parsed);\n  return parsed;\n}\n\nfunction downloadObjectAsJson(exportObj, exportName) {\n  var dataStr =\n    \"data:text/json;charset=utf-8,\" +\n    encodeURIComponent(JSON.stringify(exportObj));\n  var downloadAnchorNode = document.createElement(\"a\");\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\n  downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n  document.body.appendChild(downloadAnchorNode); // required for firefox\n  downloadAnchorNode.click();\n  downloadAnchorNode.remove();\n}\n\nexport default function App() {\n  const [name, setName] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n  console.log(selectedFile);\n  return (\n    <div className=\"App\">\n      <Formik\n        initialValues={{\n          icons: []\n        }}\n        onSubmit={(values, props) => {\n          console.log(values);\n          const data = values.icons.reduce((list, icon) => {\n            return {\n              ...list,\n              [icon.name]: {\n                nodes: icon.content,\n                width: 48,\n                height: 48\n              }\n            };\n          }, {});\n\n          downloadObjectAsJson(data, \"icons\");\n        }}\n      >\n        {({ values, setFieldValue }) => {\n          return (\n            <>\n              <Form>\n                <FieldArray\n                  name=\"icons\"\n                  render={(arrayHelpers) => (\n                    <div>\n                      {values.icons && values.icons.length > 0 ? (\n                        values.icons.map((icon, index) => (\n                          <div key={index} className=\"icon-input\">\n                            <div className=\"formControl\">\n                              <label htmlFor=\"file\">Icon Name</label>\n                              <Field name={`icons.${index}.name`} type=\"text\" />\n                            </div>\n                            <div className=\"formControl\">\n                              <label htmlFor=\"file\">Upload File</label>\n                              <FileUploader\n                                name={`icons.${index}.content`}\n                                onFileSelectSuccess={(file) => {\n                                  read(file).then((res) => {\n                                    setFieldValue(\n                                      `icons.${index}.content`,\n                                      res\n                                    );\n                                  });\n                                }}\n                              />\n                            </div>\n                            <div className=\"icon-preview\">\n                              {values.icons[index].content && (\n                                <Icon\n                                  name={index}\n                                  size={40}\n                                  nodes={values.icons[index].content}\n                                />\n                              )}\n                            </div>\n                            <button\n                              type=\"button\"\n                              onClick={() => arrayHelpers.remove(index)} // remove an icon from the list\n                            >\n                              -\n                            </button>\n                            <button\n                              type=\"button\"\n                              onClick={() =>\n                                arrayHelpers.insert(index + 1, {\n                                  name: \"\",\n                                  content: []\n                                })\n                              } // insert an empty string at a position\n                            >\n                              +\n                            </button>\n                          </div>\n                        ))\n                      ) : (\n                        <button\n                          type=\"button\"\n                          onClick={() => arrayHelpers.push(\"\")}\n                        >\n                          Add Icon\n                        </button>\n                      )}\n                      <div>\n                        <button type=\"submit\">Submit</button>\n                      </div>\n                    </div>\n                  )}\n                />\n              </Form>\n              <br />\n              {JSON.stringify(values)}\n            </>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}